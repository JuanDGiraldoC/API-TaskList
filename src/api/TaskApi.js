/*
 * Lista de tareas
 * Esta API permite controlar y manejar una lista de tareas. Crear, lista, actualizar y eliminar tareas de cualquier tipo
 *
 * OpenAPI spec version: 1.0.0
 * Contact: juandgc09@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Task} from '../model/Task';

/**
* Task service.
* @module api/TaskApi
* @version 1.0.0
*/
export class TaskApi {

    /**
    * Constructs a new TaskApi. 
    * @alias module:api/TaskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the agregarTarea operation.
     * @callback moduleapi/TaskApi~agregarTareaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Agregar una nueva tarea a la lista
     * Permite agregar una nueva tarea a la lista con sus respectivos campos
     * @param {module:model/Task} body Agregar una nueva tarea a la lista
     * @param {Number} idTarea 
     * @param {String} nombreTarea 
     * @param {String} descripcion 
     * @param {module:model/String} momentoDia 
     * @param {module:api/TaskApi~agregarTareaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    agregarTarea(body, idTarea, nombreTarea, descripcion, momentoDia, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling agregarTarea");
      }
      // verify the required parameter 'idTarea' is set
      if (idTarea === undefined || idTarea === null) {
        throw new Error("Missing the required parameter 'idTarea' when calling agregarTarea");
      }
      // verify the required parameter 'nombreTarea' is set
      if (nombreTarea === undefined || nombreTarea === null) {
        throw new Error("Missing the required parameter 'nombreTarea' when calling agregarTarea");
      }
      // verify the required parameter 'descripcion' is set
      if (descripcion === undefined || descripcion === null) {
        throw new Error("Missing the required parameter 'descripcion' when calling agregarTarea");
      }
      // verify the required parameter 'momentoDia' is set
      if (momentoDia === undefined || momentoDia === null) {
        throw new Error("Missing the required parameter 'momentoDia' when calling agregarTarea");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'id_tarea': idTarea,'nombre_tarea': nombreTarea,'descripcion': descripcion,'momento_dia': momentoDia
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the eliminarTareaPorId operation.
     * @callback moduleapi/TaskApi~eliminarTareaPorIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Elimina una tarea por su Id
     * Eliminar una tarea de la lista en base a su Id
     * @param {Number} idTarea Id de la tarea que se desea modificar
     * @param {module:api/TaskApi~eliminarTareaPorIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eliminarTareaPorId(idTarea, callback) {
      
      let postBody = null;
      // verify the required parameter 'idTarea' is set
      if (idTarea === undefined || idTarea === null) {
        throw new Error("Missing the required parameter 'idTarea' when calling eliminarTareaPorId");
      }

      let pathParams = {
        'id_tarea': idTarea
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/task/{id_tarea}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the eliminarTareaPorNombre operation.
     * @callback moduleapi/TaskApi~eliminarTareaPorNombreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Elimina una tarea por su nombre
     * Eliminar una tarea de la lista en base a su nombre
     * @param {String} nombreTarea nombre de la tarea que se desea modificar
     * @param {module:api/TaskApi~eliminarTareaPorNombreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eliminarTareaPorNombre(nombreTarea, callback) {
      
      let postBody = null;
      // verify the required parameter 'nombreTarea' is set
      if (nombreTarea === undefined || nombreTarea === null) {
        throw new Error("Missing the required parameter 'nombreTarea' when calling eliminarTareaPorNombre");
      }

      let pathParams = {
        'nombre_tarea': nombreTarea
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/task/{nombre_tarea}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listarTareas operation.
     * @callback moduleapi/TaskApi~listarTareasCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Task>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar tareas almacenadas
     * Permite obtener la listar todas las tareas almacenadas con todos sus datos
     * @param {module:api/TaskApi~listarTareasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listarTareas(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Task];

      return this.apiClient.callApi(
        '/task', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the modificarTareaPorId operation.
     * @callback moduleapi/TaskApi~modificarTareaPorIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modificar una tarea por su id
     * Modificar una tarea de la lista en base a su id
     * @param {Number} idTarea Id de la tarea que se desea modificar
     * @param {Object} opts Optional parameters
     * @param {module:model/Task} opts.body Modificar una tarea de la lista
     * @param {Number} opts.idTarea 
     * @param {String} opts.nombreTarea 
     * @param {String} opts.descripcion 
     * @param {module:model/String} opts.momentoDia 
     * @param {module:api/TaskApi~modificarTareaPorIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    modificarTareaPorId(idTarea, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'idTarea' is set
      if (idTarea === undefined || idTarea === null) {
        throw new Error("Missing the required parameter 'idTarea' when calling modificarTareaPorId");
      }

      let pathParams = {
        'id_tarea': idTarea
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'id_tarea': opts['idTarea'],'nombre_tarea': opts['nombreTarea'],'descripcion': opts['descripcion'],'momento_dia': opts['momentoDia']
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/task/{id_tarea}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the modificarTareaPorNombre operation.
     * @callback moduleapi/TaskApi~modificarTareaPorNombreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modificar una tarea por su nombre
     * Modificar una tarea de la lista en base a su nombre
     * @param {String} nombreTarea Nombre de la tarea que se desea modificar
     * @param {Object} opts Optional parameters
     * @param {module:model/Task} opts.body Modificar una tarea de la lista
     * @param {Number} opts.idTarea 
     * @param {String} opts.nombreTarea 
     * @param {String} opts.descripcion 
     * @param {module:model/String} opts.momentoDia 
     * @param {module:api/TaskApi~modificarTareaPorNombreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    modificarTareaPorNombre(nombreTarea, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'nombreTarea' is set
      if (nombreTarea === undefined || nombreTarea === null) {
        throw new Error("Missing the required parameter 'nombreTarea' when calling modificarTareaPorNombre");
      }

      let pathParams = {
        'nombre_tarea': nombreTarea
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'id_tarea': opts['idTarea'],'nombre_tarea': opts['nombreTarea'],'descripcion': opts['descripcion'],'momento_dia': opts['momentoDia']
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/task/{nombre_tarea}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the obtenerListaPorMomentoDia operation.
     * @callback moduleapi/TaskApi~obtenerListaPorMomentoDiaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Task>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener una lista de tareas
     * Permite obtener una lista de tareas en base al momento del dia donde se pretenden realizar
     * @param {module:model/String} momentoDia momento del dia donde se desea saber que tareas hay asignadas
     * @param {module:api/TaskApi~obtenerListaPorMomentoDiaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    obtenerListaPorMomentoDia(momentoDia, callback) {
      
      let postBody = null;
      // verify the required parameter 'momentoDia' is set
      if (momentoDia === undefined || momentoDia === null) {
        throw new Error("Missing the required parameter 'momentoDia' when calling obtenerListaPorMomentoDia");
      }

      let pathParams = {
        'momento_dia': momentoDia
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Task];

      return this.apiClient.callApi(
        '/task/{momento_dia}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the obtenerTareaPorId operation.
     * @callback moduleapi/TaskApi~obtenerTareaPorIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Task{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener una tarea por su id
     * Permite obtener una tarea de la lista en base a su id
     * @param {Number} idTarea Id de la tarea que se desea consultar
     * @param {module:api/TaskApi~obtenerTareaPorIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    obtenerTareaPorId(idTarea, callback) {
      
      let postBody = null;
      // verify the required parameter 'idTarea' is set
      if (idTarea === undefined || idTarea === null) {
        throw new Error("Missing the required parameter 'idTarea' when calling obtenerTareaPorId");
      }

      let pathParams = {
        'id_tarea': idTarea
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Task;

      return this.apiClient.callApi(
        '/task/{id_tarea}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the obtenerTareaPorNombre operation.
     * @callback moduleapi/TaskApi~obtenerTareaPorNombreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Task{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener una tarea por su nombre
     * Permite obtener una tarea de la lista en base a su nombre
     * @param {String} nombreTarea nombre de la tarea que se desea consultar
     * @param {module:api/TaskApi~obtenerTareaPorNombreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    obtenerTareaPorNombre(nombreTarea, callback) {
      
      let postBody = null;
      // verify the required parameter 'nombreTarea' is set
      if (nombreTarea === undefined || nombreTarea === null) {
        throw new Error("Missing the required parameter 'nombreTarea' when calling obtenerTareaPorNombre");
      }

      let pathParams = {
        'nombre_tarea': nombreTarea
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Task;

      return this.apiClient.callApi(
        '/task/{nombre_tarea}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}