/*
 * Lista de tareas
 * Esta API permite controlar y manejar una lista de tareas. Crear, lista, actualizar y eliminar tareas de cualquier tipo
 *
 * OpenAPI spec version: 1.0.0
 * Contact: juandgc09@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ListaDeTareas);
  }
}(this, function(expect, ListaDeTareas) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ListaDeTareas.TaskApi();
  });

  describe('(package)', function() {
    describe('TaskApi', function() {
      describe('agregarTarea', function() {
        it('should call agregarTarea successfully', function(done) {
          // TODO: uncomment, update parameter values for agregarTarea call
          /*

          instance.agregarTarea(body, idTarea, nombreTarea, descripcion, momentoDia, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('eliminarTareaPorId', function() {
        it('should call eliminarTareaPorId successfully', function(done) {
          // TODO: uncomment, update parameter values for eliminarTareaPorId call
          /*

          instance.eliminarTareaPorId(idTarea, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('eliminarTareaPorNombre', function() {
        it('should call eliminarTareaPorNombre successfully', function(done) {
          // TODO: uncomment, update parameter values for eliminarTareaPorNombre call
          /*

          instance.eliminarTareaPorNombre(nombreTarea, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listarTareas', function() {
        it('should call listarTareas successfully', function(done) {
          // TODO: uncomment listarTareas call and complete the assertions
          /*

          instance.listarTareas(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(ListaDeTareas.Task);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modificarTareaPorId', function() {
        it('should call modificarTareaPorId successfully', function(done) {
          // TODO: uncomment, update parameter values for modificarTareaPorId call
          /*
          var opts = {};

          instance.modificarTareaPorId(idTarea, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modificarTareaPorNombre', function() {
        it('should call modificarTareaPorNombre successfully', function(done) {
          // TODO: uncomment, update parameter values for modificarTareaPorNombre call
          /*
          var opts = {};

          instance.modificarTareaPorNombre(nombreTarea, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('obtenerListaPorMomentoDia', function() {
        it('should call obtenerListaPorMomentoDia successfully', function(done) {
          // TODO: uncomment, update parameter values for obtenerListaPorMomentoDia call and complete the assertions
          /*

          instance.obtenerListaPorMomentoDia(momentoDia, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(ListaDeTareas.Task);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('obtenerTareaPorId', function() {
        it('should call obtenerTareaPorId successfully', function(done) {
          // TODO: uncomment, update parameter values for obtenerTareaPorId call and complete the assertions
          /*

          instance.obtenerTareaPorId(idTarea, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ListaDeTareas.Task);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('obtenerTareaPorNombre', function() {
        it('should call obtenerTareaPorNombre successfully', function(done) {
          // TODO: uncomment, update parameter values for obtenerTareaPorNombre call and complete the assertions
          /*

          instance.obtenerTareaPorNombre(nombreTarea, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ListaDeTareas.Task);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
